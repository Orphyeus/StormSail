import random

class Game:
    def __init__(self):
        self.players = []
        self.day_count = 0
        self.is_night = False
        self.storm_chance = 0.15
        self.journey_days = 4
        self.cellar = Cellar()
        self.deck = Deck()

    def add_player(self, player):
        self.players.append(player)

    def start_day(self):
        self.is_night = False
        self.day_count += 1
        is_storm = self.check_storm()
        self.cellar.update_conditions(self.is_night, is_storm)
        self.deck.update_conditions(self.is_night, is_storm)
        if not is_storm:
            self.vote()

    def start_night(self):
        self.is_night = True
        print(f"Night {self.day_count} begins.")
        is_storm = self.check_storm()
        self.cellar.update_conditions(self.is_night, is_storm)
        self.deck.update_conditions(self.is_night, is_storm)
        if not is_storm:
            for player in self.players:
                if player.character.is_alive:
                    player.character.perform_action(self.players)

    def check_storm(self):
        if random.random() < self.storm_chance:
            print("A storm has hit the ship!")
            if self.is_night:
                self.storm_at_night()
            else:
                self.storm_at_day()
            return True
        return False

    def storm_at_night(self):
        potential_victims = [p for p in self.players if p.character.is_alive and p.character.role != "Pirate"]
        if potential_victims:
            victim = random.choice(potential_victims)
            victim.character.is_alive = False
            print(f"{victim.name} has fallen overboard and drowned!")

    def storm_at_day(self):
        print("The crew is too busy dealing with the storm to hold a vote.")

    def vote(self):
        print("Voting time!")
        votes = {player.name: 0 for player in self.players if player.character.is_alive}
        for player in self.players:
            if player.character.is_alive:
                voted_player_name = input(f"{player.name}, who do you vote for? ")
                votes[voted_player_name] += 1
        eliminated_player = max(votes, key=votes.get)
        for player in self.players:
            if player.name == eliminated_player:
                player.character.is_alive = False
                print(f"{eliminated_player} has been eliminated!")

    def check_win_conditions(self):
        good_alive = sum(1 for p in self.players if p.character.alignment == "Good" and p.character.is_alive)
        evil_alive = sum(1 for p in self.players if p.character.alignment == "Evil" and p.character.is_alive)
        if not evil_alive:
            print("The good side wins!")
            return True
        elif good_alive <= evil_alive:
            print("The evil side wins!")
            return True
        elif self.day_count > self.journey_days:
            print("The voyage is complete! The good side wins!")
            return True
        return False

    def start_game(self):
        print("Welcome to Stormy Voyage!")
        self.setup_game()
        while not self.check_win_conditions():
            self.start_day()
            self.start_night()

    def setup_game(self):
        print("Setting up the game...")
        # Add players and characters here

class Location:
    def __init__(self, noise, light):
        self.noise = noise
        self.light = light

    def update_conditions(self, is_night, is_storm):
        if is_storm:
            if is_night:
                self.noise, self.light = (1, 3) if self.__class__.__name__ == "Cellar" else (7, 3)
            else:
                self.noise, self.light = (3, 5) if self.__class__.__name__ == "Cellar" else (8, 5)
        else:
            if is_night:
                self.noise, self.light = (2, 2) if self.__class__.__name__ == "Cellar" else (5, 5)
            else:
                self.noise, self.light = (4, 4) if self.__class__.__name__ == "Cellar" else (7, 8)

class Cellar(Location):
    def __init__(self):
        super().__init__(noise=4, light=4)

class Deck(Location):
    def __init__(self):
        super().__init__(noise=7, light=8)
