import random

class Location:
    def __init__(self, day_noise, day_light, night_noise, night_light, storm_day_noise, storm_day_light, storm_night_noise, storm_night_light):
        self.day_noise = day_noise
        self.day_light = day_light
        self.night_noise = night_noise
        self.night_light = night_light
        self.storm_day_noise = storm_day_noise
        self.storm_day_light = storm_day_light
        self.storm_night_noise = storm_night_noise
        self.storm_night_light = storm_night_light

    def get_conditions(self, is_night, is_storm):
        if is_storm:
            if is_night:
                return (self.storm_night_noise, self.storm_night_light)
            else:
                return (self.storm_day_noise, self.storm_day_light)
        else:
            if is_night:
                return (self.night_noise, self.night_light)
            else:
                return (self.day_noise, self.day_light)

class Cellar(Location):
    def __init__(self):
        super().__init__(4, 4, 2, 2, 3, 5, 1, 3)

class Deck(Location):
    def __init__(self):
        super().__init__(7, 8, 5, 5, 8, 5, 7, 3)

class Game:
    def __init__(self):
        self.players = []
        self.day_count = 0
        self.is_night = False
        self.storm_chance = 0.15
        self.journey_days = 4  # Initial journey days
        self.cellar = Cellar()
        self.deck = Deck()

    def add_player(self, player):
        self.players.append(player)

    def start_day(self):
        self.is_night = False
        self.day_count += 1
        print(f"Day {self.day_count} begins.")
        if not self.check_storm():
            self.vote()

    def start_night(self):
        self.is_night = True
        print(f"Night {self.day_count} begins.")
        if not self.check_storm():
            for player in self.players:
                if player.character.is_alive:
                    player.character.perform_action(self.players)

    def check_storm(self):
        if random.random() < self.storm_chance:
            print("A storm has hit the ship!")
            if self.is_night:
                self.storm_at_night()
            else:
                self.storm_at_day()
            return True
        return False

    def storm_at_night(self):
        potential_victims = [p for p in self.players if p.character.is_alive and p.character.role != "Pirate"]
        if potential_victims:
            victim = random.choice(potential_victims)
            victim.character.is_alive = False
            print(f"{victim.name} has fallen overboard and drowned!")

    def storm_at_day(self):
        print("The crew is too busy dealing with the storm to hold a vote.")

    def vote(self):
        print("Voting time!")
        votes = {player.name: 0 for player in self.players if player.character.is_alive}
        for player in self.players:
            if player.character.is_alive:
                voted_player_name = input(f"{player.name}, who do you vote for? ")
                votes[voted_player_name] += 1
        eliminated_player = max(votes, key=votes.get)
        for player in self.players:
            if player.name == eliminated_player:
                player.character.is_alive = False
                print(f"{eliminated_player} has been eliminated!")

    def check_win_conditions(self):
        good_alive = sum(1 for p in self.players if p.character.alignment == "Good" and p.character.is_alive)
        evil_alive = sum(1 for p in self.players if p.character.alignment == "Evil" and p.character.is_alive)
        if not evil_alive:
            print("The good side wins!")
            return True
        elif len(evil_alive) >= len(good_alive):
            print("The evil side wins!")
            return True
        elif self.day_count > self.journey_days:
            print("The voyage is complete! The good side wins!")
            return True
        return False

    def print_environment_conditions(self, location):
        is_storm = self.check_storm()
        noise, light = location.get_conditions(self.is_night, is_storm)
        print(f"Current environment in {location.__class__.__name__}: Noise level {noise}, Light level {light}")

    def start_game(self):
        print("Welcome to Stormy Voyage!")
        self.setup_game()
        while not self.check_win_conditions():
            self.start_day()
            self.start_night()

    def setup_game(self):
        print("Setting up the game...")
        # Add players and characters here
        # Example: self.add_player(Player("Alice", Character("Pirate", "Evil")))
        # Don't forget to set up players and characters

# Example player and character classes (You might need to define these or modify according to your game design)
class Player:
    def __init__(self, name, character):
        self.name = name
        self.character = character

class Character:
    def __init__(self, role, alignment):
        self.role = role
        self.alignment = alignment
        self.is_alive = True

    def perform_action(self, players):
        # Define character actions here
        pass

# Example game initialization and start
game = Game()
# Add players
game.add_player(Player("Alice", Character("Pirate", "Evil")))
game.add_player(Player("Bob", Character("Sailor", "Good")))
# Start the game
game.start_game()
