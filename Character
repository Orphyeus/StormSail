import random

class Character:
    """Base class for all characters in the game."""

    def __init__(self, name, role, alignment):
        """Initialize a character with a name, role, and alignment."""
        self.name = name
        self.role = role
        self.alignment = alignment
        self.is_alive = True

    def perform_action(self, target=None):
        """Perform an action. Subclasses should override this method."""
        raise NotImplementedError("Subclass must implement abstract method")

    def get_random_alignment(self):
        """Return a random alignment ('Good' or 'Evil')."""
        return "Good" if random.choice([True, False]) else "Evil"

class Captain(Character):
    def __init__(self, name):
        super().__init__(name, "Captain", self.get_random_alignment())

    def perform_action(self, target=None):
        """Captain imprisons a target."""
        if target:
            target.is_imprisoned = True
            print(f"{self.name} has imprisoned {target.name}.")

# Similar structure for other character classes
# Lookout, Navigator, Alchemist, Witch, Sufi, DiplomaticEnvoy, EnvoysGuard, Merchant, Mercenary, Assassin, OrdinaryPassenger

class Navigator(Character):
    def __init__(self, name):
        super().__init__(name, "Navigator", self.get_random_alignment())

    def perform_action(self, target=None):
        """Adjust the storm probability based on the navigator's alignment."""
        # Note: Requires Game instance to modify its attributes
        pass

# ... (Definitions for other character classes)

class Player:
    """Represents a player in the game."""

    def __init__(self, name, character):
        """Initialize a player with a name and a character."""
        self.name = name
        self.character = character

# Example of game class to interact with these characters
# class Game:
#     def __init__(self):
#         self.storm_probability = 0.15
#         # Other initializations
